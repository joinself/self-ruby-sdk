variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

default:
  image: ruby:2.6.3-stretch

stages:
  - Test
  - Build
  - Deploy

test:
  stage: Test
  script:
    - test
  only:
    - branches

build:
  stage: Build
  script:
    - build
  artifacts:
    paths:
      - *.gem
  only:
    - branches

rubygems:
  stage: Deploy
  script:
    - deploy
    - slackNotify
  only:
    - branches

.functions: &functions |
  set -x

  function test() {
    bundle install
    bundle exec rake test
  }

  function build() {
    local version=$(cat VERSION)
    sed -i "s/VERSION = .*/VERSION = ${version}/g" lib/version.rb
    bundle install
    gem build selfid.gemspec
    gem install selfid-${version}.gem
  }

  function deploy() {
    local version=$(cat VERSION)
    local currentGitTag=$(currentGitTag)

    echo $version
    echo $currentGitTag

    if [[ $version != $currentGitTag ]]; then
      # create & push git tag
      #sed -i "s/VERSION = .*/VERSION = ${version}/g" lib/version.rb
      #bundle install
      #gem push selfid-${version}.gem
      echo "Deploying to Rubygems"
    else
      echo "Nothing to do"
    fi
  }

  function slackNotify() {
    echo "Sending Slack notification"
  }

  function currentGitTag() {
    setupGit
    local version=$(git ls-remote -q --tags https://github.com/${CI_PROJECT_PATH} | sort -t / -k 3 -V | grep -v '{}' | tail -n 1 | awk -F / '{print $3}')
    echo $version
  }

  function setupGit() {
    git config --global user.name self-ci-bot
    git config --global user.email ops@selfid.net
    git config --global url."https://${GITHUB_TOKEN}:@github.com".insteadOf "https://github.com"
  }



  function release() {
    commitDesc=$CI_COMMIT_DESCRIPTION

    if [[ $(git tag) == "" ]]; then
      newVersion="0.1.0"
    else
      currentVersion=$(git ls-remote -q --tags https://${GITHUB_TOKEN}:@github.com/${CI_PROJECT_PATH} | sort -t / -k 3 -V | grep -v '{}' | tail -n 1 | awk -F / '{print $3}')

      case $commitDesc in
        *+bump-major*)
          newVersion=$(semver bump major $currentVersion)
          ;;
        *+bump-minor*)
          newVersion=$(semver bump minor $currentVersion)
          ;;
        *)
          newVersion=$(semver bump patch $currentVersion)
          ;;
      esac
    fi

    setup_git
    git remote set-url origin https://${GITHUB_TOKEN}:@github.com/${CI_PROJECT_PATH}

    git_release $newVersion
    slack_notify $newVersion
  }

  function git_release() {
    version=$1
    git tag -a $version -m "$version"
    git push origin $version
  }

  function deploy() {
    env=$1
    currentVersion=$(git ls-remote -q --tags https://${GITHUB_TOKEN}:@github.com/${CI_PROJECT_PATH} | sort -t / -k 3 -V | grep -v '{}' | tail -n 1 | awk -F / '{print $3}')
    git clone https://${GITHUB_TOKEN}:@github.com/aldgate-ventures/self-platform.git
    cd self-platform/helm/releases/${env}
    setup_kubectl ${env}
    service=${CI_PROJECT_TITLE#*-}
    helm upgrade ${service} -f ${service}-values.yaml --set image.tag=${currentVersion} ../../charts/${service}/. --kube-context ${env}
  }

  function slack_notify() {
    version=$1
    slack chat send "New release <https://github.com/${CI_PROJECT_PATH}|${CI_PROJECT_NAME}> <https://github.com/${CI_PROJECT_PATH}/commits/${version}|${version}>" '#ci'
  }

before_script:
  - *functions
